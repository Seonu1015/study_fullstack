- Dispatcher Servlet
클라이언트로부터 들어오는 모든 요청을 받아 처리하고 응답을 생성하여 반환하는 컴포넌트

1) 클라이언트 요청 수신 : Dispatcher Servlet은 웹 어플리케이션의 Front Controller다.
    클라이언트로부터 들어오는 모든 HTTP요청을 가로챈다.
2) 핸들러 매핑(Handler Mapping) : Dispatcher Servlet은 요청 URL과 매핑된 핸들러(컨트롤러)를 찾기 위해
    등록된 핸들러 매핑 구조에 따라 HandlerMapping 객체를 사용한다.
    핸들러 매핑은 어떤 컨트롤러가 해당 요청을 처리해야 하는지 결정한다.
3) 핸들러 실행(Handler Execution) : 선택된 핸들러를 실행하여 실제 비즈니스 로직을 처리한다.
    컨트롤러는 클라이언트의 요청을 처리하고 필요한 비즈니스 로직 및 서비스 호출 등의 작업을 수행한다.
4) 모델 생성 및 전달 : 핸들러가 실행되면 해당 작업 결과 모델 객체를 생성하고, 뷰에 전달한다.
    모델 객체는 사용자에게 표시될 데이터와 뷰 템플릿에서 사용될 속성 값으로 구분된다.
5) 뷰 결정 (View Resolution) : 핸들러가 반환한 뷰 이름을 기반으로 적절한 ViewResolver 객체를 사용하여
    실제 보여줄 뷰 템플릿을 결정한다.
6) 뷰 렌더링 (View Rendering) : 뷰 이름과 실제 연결되는 뷰 파일을 찾아서 모델 객체와 이 정보를
    뷰에 전달하여 최종적인 응답 페이지를 생성한다.
7) 응답 반환 : 최종적으로 생성된 응답 페이지를 HTTP 응답에 포함하여 반환한다.

Dispatcher Servlet은 Spring Framework에서 중앙 집중식으로 클라이언트 요청 처리 흐름을 관리한다.
여러 기능들(HandlerMapping, HandlerAdapter, ViewResolver 등)과 함께 협력하여 웹 어플리케이션 개발 및
    관리 작업의 수준을 높여줄 수 있다.

@Configuration
@EnableWebMvc # Spring MVC 활성화
public class WebConfig implement WebMvcConfigurer {
    @Override # 기본 서블릿 메서드를 활성화하여 정적 리소스 처리
    public void configureDefaultServletHandling(DefaultServletHandlerConfigure configure) {
        configurer.enable();
    }

    @Bean
    public ViewResolver ViewResolver() { # 뷰 이름과 실제 JSP 파일 경로 연결
        InternalResourceViewResolver resolver = new InternalResourceViewResolver();
        resolver.setPrefix("/WEB-INF/views/");
        resolver.setSuffix(".jsp");
        return resolver;
    }

    @Override # 특정 url과 뷰 이름 매핑
    public void addViewControllers(ViewConrollerRegistry registry) {
        registry.addViewControllers("/").setViewName("index");
    }
}

public class MvcWebApplicationInitializer extends AbstractAnnotationConfigDispatcherServletInitializer {
    @Override
    protected Class<?>[] getRootConfigClasses() {
        return null;
    }

    @Override
    protected Class<?>[] getServletConfigClasses() {
        return new Class[]{Webconfig.class};
    }

    @Override
    protected String[] getServletMapping() {
        return new String[]{"/";}
    }
}