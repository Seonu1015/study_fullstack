- 가상환경 설정
아나콘다 에러가 났던 이유 : 아나콘다를 설치할 때, 많은 패키지들을 설치한다.
프로젝트를 배포할 시 원격 서버에 따로 패키지들을 설치해줘야 한다.

1) 가상환경 생성
python -m venv myenv
현재 디렉토리에 myenv 라는 새로운 가상환경을 생성한다.

2) 가상환경 활성화
myenv\Scripts\activate

3) 패키지 설치
pip install django

4) 프로젝트 생성, 앱 생성 ...

- 웹 서버 선택 (Nginx, Apache)
웹 서버는 클라이언트의 요청을 받아서 처리하고 그 결과를 다시 클라이언트한테 전달하는 역할을 한다.

Nginx : 높은 동시 연결 처리 능력을 제공하여 많이 사용되고 있는 웹 서버다.
    설정이 비교적 간단하고, 정적 파일 처리 능력이 우수하다.
Apache : 가장 널리 사용되고 있는 오픈소스 웹 서버다.
    다양한 모듈을 통해 기능 확장이 가능하다.

그러나 장고 어플리케이션은 파이썬으로 작성된 동적인 콘텐츠를 생성한다.
이러한 작업을 처리하기 위해서는 WSGI(Web Server Gateway Interface) 어플리케이션 서버가 필요하다.

Gunicorn, uWSGI가 주로 사용된다.

Gunicorn : GreenUnicorn은 Python WSGI HTTP Server로 파이썬 웹 어플리케이션과 함께 사용되는 서버 중 하나.
    설정과 배포가 상대적으로 간단하다. Nginx와 잘 연동해서 사용한다.
uWSGI : Python WSGI HTTP Server로 파이썬 웹 어플리케이션과 함께 사용되는 서버 중 하나.
    uWSGI는 여러 프로토콜과 스택들에 대해 지원하기 때문에 Gunicorn보다 다양한 설정과 커스터마이징이 가능하다.

- Nginx 사용방법

1) Nginx 설치 (운영체제의 패키지 관리자)
sudo apt-get update
sudo apt-get install nginx

2) Nginx 설정 (etc/nginx/sites-available/)
server {
    listen 80;
    server_name your_domain;

    location / {
        include proxy_params;
        proxy_pass http://unix:/path/to/myapp/app.sock; # WSGI 어플리케이션 서버가 동작하는 주소
    }

    location /static/ {
        alias /path/to/myapp/static/files/;

    }
}

3) Nginx 재시작
sudo service nginx restart # 변경된 설정이 저장

- Apache 사용방법

1) Apache 설치
sudo apt-get update
sudo apt-get install apache2

2) Apache 설정
<VirtualHost *::80>
    ServerName your_domain

    WSGIScriptAlias //path/to/myapp/django/app/wsgi.py

    Alias /path/to/myapp/static/files/

    <Directory /path/to/myapp/django/app/>
        <File wsgi.py>
            Require all granted
        </File>
    </Directory>

    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined # 직접 만든 로그
</VirtualHost>

3) Apache 재시작
sudo service apache2 restart

- Gunicorn

1) 설치
pip install gunicorn

2) 실행
gunicorn {프로젝트이름}.wsgi

- uWSGI

1) 설치
pip install uwsgi

2) 실행
uwsgi --http :8000 --module {프로젝트이름}.wsgi

- 웹 서버와 WSGI 어플리케이션 서버 연동

웹 서버(Nginx, Apache)는 주로 정적 파일들의 처리를 담당한다.
WSGI (Gunicorn, uWSGI)는 주로 동적인 내용(장고 앱에서 처리되는 부분)들의 처리를 담당한다.

1) Nginx - Gunicorn 연동

+ Gunicorn 실행
gunicorn {프로젝트이름}.wsgi:application --bind 127.0.0.1:8000

+ Nginx 설정 (etc/nginx/sites-available/default)
location / {
    proxy_pass http://127.0.0.1:8000;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
}

+ Nginx 재시작
sudo service nginx restart

2) Apache - uWSGI 연동

+ Apache 설정 (환경설정 파일, httpd.conf)

<VirtualHost *::80>
    ServerName your_domain

    WSGIScriptAlias //path/to/myapp/django/app/wsgi.py

    Alias /path/to/myapp/static/files/

    <Directory /path/to/myapp/django/app/>
        <File wsgi.py>
            Require all granted
        </File>
    </Directory>

    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined
    ProxyPass / uwsgi://127.0.0.1:8000/
</VirtualHost>

+ Apache 재시작
sudo service apache2 restart

+ uWSGI 실행
uwsgi --http :8001 --module {프로젝트이름}.wsgi

- 정적 파일 관리
배포 환경에서는 collectstatic 명령어를 활용하여 정적 파일들을 한 곳에 모아두는 작업과 이 파일들에 접근할 수 있도록
웹 서버의 경로 설정을 해줘야한다.

1) collectstatic 실행
python manage.py collectstatic

해당 명령어를 실행하면 django 설정의 STATIC_ROOT에 지정된 디렉토리에 모든 정적 파일들이 복사된다.

2) 웹 서버 설정 : 웹 서버는 클라이언트가 직접 정적 파일에 접근할 수 있도록 설정해야 한다.

+ Nginx
location /static/ {
    alias /path/to/myapp/static/files/;
}

+ Apache
<Directory /path/to/myapp/django/app/>
    <File wsgi.py>
        Require all granted
    </File>
</Directory>

3) 재시작!

- 보안설정

- 배포

# 뷰 클래스, 폼 클래스를 활용해서 CRUD를 사용할 수 있는 사이트를 만들어보자.