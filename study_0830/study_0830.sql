DESC EMP;
DESC DEPT;

SELECT JOB, DEPTNO, AVG(SAL)
FROM EMP
GROUP BY JOB, DEPTNO;

SELECT ENAME
FROM EMP
--WHERE (COMM IS NOT NULL AND SAL*12 + COMM OR SAL*12) >= 30000;
WHERE SAL*12 + COMM >= 30000 OR SAL*12 >= 30000;

SELECT ENAME, SAL*12 + NVL(COMM, 0) as TOTAL_SALARY
FROM EMP;

SELECT ENAME, NVL(SAL*12 + COMM, SAL*12) as TOTAL_SALARY
FROM EMP;


SELECT EMPNO, ENAME, JOB, SAL, DEPTNO
FROM EMP
WHERE DEPTNO = 20 AND SAL >= 2000
UNION
SELECT EMPNO, ENAME, JOB, SAL, DEPTNO
FROM EMP
WHERE DEPTNO = 30 AND SAL >= 2000;

SELECT EMPNO, ENAME, JOB, SAL, DEPTNO
FROM EMP
WHERE DEPTNO = 20 AND SAL >= 2000
UNION ALL
SELECT EMPNO, ENAME, JOB, SAL, DEPTNO
FROM EMP
WHERE DEPTNO = 30 AND SAL >= 2000;

SELECT EMPNO, ENAME, JOB, SAL, DEPTNO
FROM EMP
WHERE DEPTNO = 30
INTERSECT
SELECT EMPNO, ENAME, JOB, SAL, DEPTNO
FROM EMP
WHERE JOB = 'SALESMAN';

-- 사원 이름이 5글자 이상인 애들 출력

SELECT *
FROM EMP
WHERE LENGTH(ENAME) >= 5;

-- JOB을 3글자까지만 출력

SELECT EMPNO, ENAME, SUBSTR(JOB, 1, 3) AS JOB, MGR, HIREDATE, SAL, COMM, DEPTNO
FROM EMP;
-- 일일이 입력안하고 한번에 입력하는 방법은 없다
-- 왜냐면 의미없는 작업이다


-- A가 들어간 직업 % 안쓰고 출력

SELECT *
FROM EMP
--WHERE INSTR(JOB, 'A') > 0 AND (INSTR(JOB, 'A') <= LENGTH(JOB));
WHERE INSTR(JOB, 'A') > 0;

SELECT CONCAT('HELLO', 'WORLD') FROM DUAL;

SELECT LENGTH('HELLO') FROM DUAL;

SELECT LOWER('HELLO') FROM DUAL;

SELECT UPPER('HELLO') FROM DUAL;

SELECT SUBSTR('HELLO, WORLD', 1, 5) FROM DUAL;

SELECT REPLACE('HELLO, WORLD', 'WORLD', 'world') FROM DUAL;

SELECT INSTR('HELLO, WORLD', 'O', 1, 2) FROM DUAL;

SELECT TRIM(BOTH 'H' FROM 'HELLO, WORLD HH') FROM DUAL;

SELECT TRIM(LEADING 'H' FROM 'HELLO, WORLD HH') FROM DUAL;

SELECT TRIM(TRAILING 'H' FROM 'HELLO, WORLD HH') FROM DUAL;

SELECT SYSDATE FROM DUAL;

SELECT EXTRACT(YEAR FROM HIREDATE) FROM EMP;

SELECT TO_DATE('2020/01/01', 'YYYY/MM/DD') FROM DUAL;

SELECT TO_CHAR(SYSDATE, 'YYYY/MM/DD') FROM DUAL;

-- 입사 40주년이 언제인지 출력
SELECT EXTRACT(YEAR FROM HIREDATE) + 40
FROM EMP;

SELECT ADD_MONTHS(HIREDATE, 480)
FROM EMP;

-- 입사한 지 42년차 직원들 출력
SELECT *
FROM EMP
WHERE EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM HIREDATE) >= 42;

SELECT *
FROM EMP
WHERE FLOOR(MONTHS_BETWEEN(SYSDATE, HIREDATE)) >= 42*12;

SELECT *
FROM EMP
WHERE TO_CHAR(SYSDATE, 'YYYY') = TO_CHAR(ADD_MONTHS(HIREDATE, 42*12), 'YYYY');

SELECT COALESCE(NULL, 'APPLE', 'BANAN', 'ORANGE') FROM DUAL;

SELECT COALESCE(NULL, NULL, NULL, NULL) FROM DUAL;

SELECT EMPNO, ENAME, JOB, SAL, DECODE(JOB, 'MANAGER', SAL*1.1, 'SALESMAN', SAL*1.05, 'ANALYST', SAL*1.3, SAL) AS NEW_SAL
FROM EMP;

--추가 수당 '해당 사항 없음', '해당 사항 있음'
SELECT ENAME, NVL2(COMM, '해당 사항 없음', '해당 사항 있음') AS COMM
FROM EMP;

--MANAGER 급여 합계
SELECT SUM(SAL)
FROM EMP
WHERE JOB = 'MANAGER';

--30번 부서 인원수
SELECT COUNT(*) AS COUNT_30
FROM EMP
WHERE DEPTNO = 30;

--제일 오래된 인원과 입사동기들(같은 해 입사) 출력
SELECT EXTRACT(YEAR FROM MIN(HIREDATE)) FROM EMP;

SELECT *
FROM EMP
WHERE EXTRACT(YEAR FROM HIREDATE) = (SELECT EXTRACT(YEAR FROM MIN(HIREDATE)) FROM EMP);

SELECT ENAME, HIREDATE, EXTRACT(YEAR FROM HIREDATE) AS HIREYEAR
FROM EMP
GROUP BY ENAME, HIREDATE
HAVING MIN(EXTRACT(YEAR FROM HIREDATE)) = EXTRACT(YEAR FROM HIREDATE);
-- 각 그룹의 MIN값이 나오기 때문에 년도별로 그룹화한 상태에서 해당 그룹의 최소값은 결국 다 자기 값을 최소로 가지기 때문에 모두 출력된다. 

SELECT JOB, COUNT(*)
FROM EMP
GROUP BY JOB
HAVING COUNT(*) >= 3;

SELECT DEPTNO, JOB, SUM(SAL)
FROM EMP
GROUP BY(DEPTNO, JOB);

SELECT DEPTNO, JOB, SUM(SAL)
FROM EMP
GROUP BY ROLLUP(DEPTNO, JOB);

SELECT DEPTNO, JOB, SUM(SAL)
FROM EMP
GROUP BY CUBE(DEPTNO, JOB);

SELECT DEPTNO, JOB, SUM(SAL)
FROM EMP
GROUP BY GROUPING SETS((DEPTNO), (JOB));

SELECT DEPTNO, JOB, SUM(SAL), GROUPING(DEPTNO), GROUPING(JOB)
FROM EMP
GROUP BY CUBE(DEPTNO, JOB);

-- 추가 수당 '해당 사항 없음', '추가 수당 없음', '추가 수당 xx'
SELECT ENAME,
CASE
WHEN COMM IS NULL THEN '해당 사항 없음'
WHEN COMM = 0 THEN '해당 사항 없음'
ELSE CONCAT('추가 수당 ', COMM)
END AS COMM
FROM EMP;

-- EMP 테이블과 DEPT 테이블에서 공통으로 있는 부서번호 출력
SELECT DEPTNO
FROM EMP
INTERSECT
SELECT DEPTNO
FROM DEPT;

-- 연도별 부서별 인원수
SELECT EXTRACT(YEAR FROM HIREDATE) AS HIREYEAR, DEPTNO, COUNT(*)
FROM EMP
GROUP BY GROUPING SETS((EXTRACT(YEAR FROM HIREDATE)), (DEPTNO), (EXTRACT(YEAR FROM HIREDATE), DEPTNO));

-- 각 부서별, 직업별, 그룹화된 부서 + 각 직업별, 전체 인원수, 급여 총액 (그룹화된 부서 : GROUP_DEPT, 그룹화된 직업 : GROUP_JOB)
SELECT DEPTNO, JOB, COUNT(*), SUM(SAL), GROUPING(DEPTNO) AS GROUP_DEPT, GROUPING(JOB) AS GROUP_JOB
FROM EMP
GROUP BY CUBE(DEPTNO, JOB);
